
UpDownCounter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000732  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d7  00000000  00000000  000008fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ae  00000000  00000000  00000ed5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001184  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036a  00000000  00000000  000011c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000176  00000000  00000000  00001532  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000016a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void)
{
    /* Replace with your application code */
	unsigned char count = 0;
	DDRA = 0b11111100;
  6c:	8c ef       	ldi	r24, 0xFC	; 252
  6e:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0b00001111;
  70:	8f e0       	ldi	r24, 0x0F	; 15
  72:	87 bb       	out	0x17, r24	; 23
	
	unsigned char prev1, prev2;
	prev1 = prev2 = 0;
  74:	50 e0       	ldi	r21, 0x00	; 0
  76:	90 e0       	ldi	r25, 0x00	; 0
}

int main(void)
{
    /* Replace with your application code */
	unsigned char count = 0;
  78:	80 e0       	ldi	r24, 0x00	; 0
	prev1 = prev2 = 0;
	
    while (1) 
    {
		unsigned char in;
		in = PINA;
  7a:	29 b3       	in	r18, 0x19	; 25
		
		if(in & 0x01)       // first switch at A0
  7c:	42 2f       	mov	r20, r18
  7e:	41 70       	andi	r20, 0x01	; 1
  80:	20 ff       	sbrs	r18, 0
  82:	0c c0       	rjmp	.+24     	; 0x9c <main+0x30>
		{
			if(prev1 == 0)
  84:	91 11       	cpse	r25, r1
  86:	0a c0       	rjmp	.+20     	; 0x9c <main+0x30>
#include <avr/io.h>

unsigned char upcount(unsigned char count)
{
	unsigned char result;
	result = (count + 3)%16;
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	03 96       	adiw	r24, 0x03	; 3
  8c:	8f 70       	andi	r24, 0x0F	; 15
  8e:	90 78       	andi	r25, 0x80	; 128
  90:	99 23       	and	r25, r25
  92:	24 f4       	brge	.+8      	; 0x9c <main+0x30>
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	80 6f       	ori	r24, 0xF0	; 240
  98:	9f 6f       	ori	r25, 0xFF	; 255
  9a:	01 96       	adiw	r24, 0x01	; 1
			if(prev1 == 0)
			{
				count = upcount(count);
			}
		}
		if(in & 0x02)  // first switch at A1
  9c:	32 2f       	mov	r19, r18
  9e:	32 70       	andi	r19, 0x02	; 2
  a0:	21 ff       	sbrs	r18, 1
  a2:	0c c0       	rjmp	.+24     	; 0xbc <main+0x50>
		{
			if(prev2 == 0)
  a4:	51 11       	cpse	r21, r1
  a6:	0a c0       	rjmp	.+20     	; 0xbc <main+0x50>
}

unsigned char downcount(unsigned char count)
{
	unsigned char result;
	result = (count + 16 - 3)%16;
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0d 96       	adiw	r24, 0x0d	; 13
  ac:	8f 70       	andi	r24, 0x0F	; 15
  ae:	90 78       	andi	r25, 0x80	; 128
  b0:	99 23       	and	r25, r25
  b2:	24 f4       	brge	.+8      	; 0xbc <main+0x50>
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	80 6f       	ori	r24, 0xF0	; 240
  b8:	9f 6f       	ori	r25, 0xFF	; 255
  ba:	01 96       	adiw	r24, 0x01	; 1
		}
		
		prev1 = in&(0x01);
		prev2 = in&(0x02);
		
		PORTB = count;
  bc:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	2f e3       	ldi	r18, 0x3F	; 63
  c0:	5d e0       	ldi	r21, 0x0D	; 13
  c2:	93 e0       	ldi	r25, 0x03	; 3
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	50 40       	sbci	r21, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x58>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x62>
  ce:	00 00       	nop
			{
				count = downcount(count);
			}
		}
		
		prev1 = in&(0x01);
  d0:	94 2f       	mov	r25, r20
		prev2 = in&(0x02);
  d2:	53 2f       	mov	r21, r19
  d4:	d2 cf       	rjmp	.-92     	; 0x7a <main+0xe>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
