
LED-Static-Flash-Rotate.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  0000010a  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009db  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000693  00000000  00000000  00000c47  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000496  00000000  00000000  000012da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00001770  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000430  00000000  00000000  00001840  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003f7  00000000  00000000  00001c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00002067  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e0       	ldi	r30, 0x0A	; 10
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  7a:	0c 94 83 00 	jmp	0x106	; 0x106 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <show_rotated_image>:
		show_image();
	}
	for(int i=0; i<100; i++){
		show_blankscreen();
	}
}
  82:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  86:	2b bb       	out	0x1b, r18	; 27
  88:	20 e0       	ldi	r18, 0x00	; 0
  8a:	30 e0       	ldi	r19, 0x00	; 0
  8c:	88 0f       	add	r24, r24
  8e:	99 1f       	adc	r25, r25
  90:	88 0f       	add	r24, r24
  92:	99 1f       	adc	r25, r25
  94:	88 0f       	add	r24, r24
  96:	99 1f       	adc	r25, r25
  98:	ac 01       	movw	r20, r24
  9a:	4f 59       	subi	r20, 0x9F	; 159
  9c:	5f 4f       	sbci	r21, 0xFF	; 255
  9e:	80 e8       	ldi	r24, 0x80	; 128
  a0:	fa 01       	movw	r30, r20
  a2:	e2 0f       	add	r30, r18
  a4:	f3 1f       	adc	r31, r19
  a6:	90 81       	ld	r25, Z
  a8:	98 bb       	out	0x18, r25	; 24
  aa:	96 ea       	ldi	r25, 0xA6	; 166
  ac:	9a 95       	dec	r25
  ae:	f1 f7       	brne	.-4      	; 0xac <show_rotated_image+0x2a>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <show_rotated_image+0x30>
  b2:	9b b3       	in	r25, 0x1b	; 27
  b4:	96 95       	lsr	r25
  b6:	09 f4       	brne	.+2      	; 0xba <show_rotated_image+0x38>
  b8:	98 2f       	mov	r25, r24
  ba:	9b bb       	out	0x1b, r25	; 27
  bc:	2f 5f       	subi	r18, 0xFF	; 255
  be:	3f 4f       	sbci	r19, 0xFF	; 255
  c0:	28 30       	cpi	r18, 0x08	; 8
  c2:	31 05       	cpc	r19, r1
  c4:	69 f7       	brne	.-38     	; 0xa0 <show_rotated_image+0x1e>
  c6:	08 95       	ret

000000c8 <show_rotation>:

void show_rotation(){
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
	for(int i=0; i<3; i++)
  d0:	00 e0       	ldi	r16, 0x00	; 0
  d2:	10 e0       	ldi	r17, 0x00	; 0
  d4:	0a c0       	rjmp	.+20     	; 0xea <show_rotation+0x22>
	{
		for(int j=0; j<200; j++)
		{
			show_rotated_image(i);	
  d6:	c8 01       	movw	r24, r16
  d8:	0e 94 41 00 	call	0x82	; 0x82 <show_rotated_image>
  dc:	21 97       	sbiw	r28, 0x01	; 1
}

void show_rotation(){
	for(int i=0; i<3; i++)
	{
		for(int j=0; j<200; j++)
  de:	d9 f7       	brne	.-10     	; 0xd6 <show_rotation+0xe>
		show_blankscreen();
	}
}

void show_rotation(){
	for(int i=0; i<3; i++)
  e0:	0f 5f       	subi	r16, 0xFF	; 255
  e2:	1f 4f       	sbci	r17, 0xFF	; 255
  e4:	03 30       	cpi	r16, 0x03	; 3
  e6:	11 05       	cpc	r17, r1
  e8:	19 f0       	breq	.+6      	; 0xf0 <show_rotation+0x28>
	for(int i=0; i<100; i++){
		show_blankscreen();
	}
}

void show_rotation(){
  ea:	c8 ec       	ldi	r28, 0xC8	; 200
  ec:	d0 e0       	ldi	r29, 0x00	; 0
  ee:	f3 cf       	rjmp	.-26     	; 0xd6 <show_rotation+0xe>
		for(int j=0; j<200; j++)
		{
			show_rotated_image(i);	
		}
	}
}
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	1f 91       	pop	r17
  f6:	0f 91       	pop	r16
  f8:	08 95       	ret

000000fa <main>:

int main(void)
{
	DDRA = 0xFF;
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
  fe:	87 bb       	out	0x17, r24	; 23
	
	while (1)
	{
		//show_static();
		//show_flash();
		show_rotation();
 100:	0e 94 64 00 	call	0xc8	; 0xc8 <show_rotation>
 104:	fd cf       	rjmp	.-6      	; 0x100 <main+0x6>

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
